{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Yatiken/Projects/immigration-web-v1/src/app/api/upload/route.js"],"sourcesContent":["// src/app/api/upload/route.js\r\n\r\nimport { NextResponse } from \"next/server\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\n// Ensure this code runs in a Node.js environment (so we can use fs.readFileSync, etc.)\r\nexport const runtime = \"nodejs\";\r\n\r\n// 1) Path to data.json at project root\r\nconst DATA_FILE = path.join(process.cwd(), \"data.json\");\r\n\r\n// 2) Path to the “uploads” folder under /public\r\nconst UPLOAD_DIR = path.join(process.cwd(), \"public\", \"uploads\");\r\n\r\n// Make sure the uploads folder exists at startup\r\nif (!fs.existsSync(UPLOAD_DIR)) {\r\n  fs.mkdirSync(UPLOAD_DIR, { recursive: true });\r\n}\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // a) Read all form fields\r\n    const formData = await request.formData();\r\n\r\n    // b) Pull out every single text field (as strings)\r\n    const name = formData.get(\"name\")?.toString() || \"\";\r\n    const email = formData.get(\"email\")?.toString() || \"\";\r\n    const mobile = formData.get(\"mobile\")?.toString() || \"\";\r\n    const children = formData.get(\"children\")?.toString() || \"\";\r\n    const maritalStatus = formData.get(\"maritalStatus\")?.toString() || \"\";\r\n    const highestEducation = formData.get(\"highestEducation\")?.toString() || \"\";\r\n    const currentImmigrationStatus = formData\r\n      .get(\"currentImmigrationStatus\")\r\n      ?.toString() || \"\";\r\n    const lastDateInCanada = formData.get(\"lastDateInCanada\")?.toString() || \"\";\r\n    const primaryReason = formData.get(\"primaryReason\")?.toString() || \"\";\r\n    const otherReason = formData.get(\"otherReason\")?.toString() || \"\";\r\n    const criminalConviction = formData.get(\"criminalConviction\")?.toString() || \"\";\r\n    const refusedVisa = formData.get(\"refusedVisa\")?.toString() || \"\";\r\n    const refusedVisaDetails = formData.get(\"refusedVisaDetails\")?.toString() || \"\";\r\n    const languageAssessed = formData.get(\"languageAssessed\")?.toString() || \"\";\r\n    const medicalCondition = formData.get(\"medicalCondition\")?.toString() || \"\";\r\n\r\n    // c) Generate a unique ID for this record\r\n    const id = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\r\n\r\n    // d) Helper to write a single File blob to disk and return its public URL\r\n    async function saveFile(fieldName) {\r\n      const fileBlob = formData.get(fieldName);\r\n      if (!fileBlob || !(fileBlob instanceof File)) {\r\n        return null;\r\n      }\r\n\r\n      const originalName = fileBlob.name;\r\n      const ext = path.extname(originalName) || \"\";\r\n      // e.g. “abcd1234_passportCopy.pdf”\r\n      const fileNameOnDisk = `${id}_${fieldName}${ext}`;\r\n      const filePathOnDisk = path.join(UPLOAD_DIR, fileNameOnDisk);\r\n\r\n      // Convert the File (web Blob) into a Buffer so we can write it\r\n      const arrayBuffer = await fileBlob.arrayBuffer();\r\n      const buffer = Buffer.from(arrayBuffer);\r\n\r\n      await fs.promises.writeFile(filePathOnDisk, buffer);\r\n      // Return the public‐facing URL path\r\n      return `/uploads/${fileNameOnDisk}`;\r\n    }\r\n\r\n    // e) Save each of the five possible documents (or null if none was uploaded)\r\n    const educationCredentialAssessmentUrl = await saveFile(\r\n      \"educationCredentialAssessment\"\r\n    );\r\n    const educationRecordsUrl = await saveFile(\"educationRecords\");\r\n    const languageAssessmentUrl = await saveFile(\"languageAssessment\");\r\n    const passportCopyUrl = await saveFile(\"passportCopy\");\r\n    const proofOfStatusUrl = await saveFile(\"proofOfStatus\");\r\n\r\n    // f) Build the new record object\r\n    const newRecord = {\r\n      id,\r\n      name,\r\n      email,\r\n      mobile,\r\n      children,\r\n      maritalStatus,\r\n      highestEducation,\r\n      currentImmigrationStatus,\r\n      lastDateInCanada,\r\n      primaryReason,\r\n      otherReason,\r\n      criminalConviction,\r\n      refusedVisa,\r\n      refusedVisaDetails,\r\n      languageAssessed,\r\n      medicalCondition,\r\n      documents: {\r\n        educationCredentialAssessment: educationCredentialAssessmentUrl,\r\n        educationRecords: educationRecordsUrl,\r\n        languageAssessment: languageAssessmentUrl,\r\n        passportCopy: passportCopyUrl,\r\n        proofOfStatus: proofOfStatusUrl,\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    // g) Read the existing array from data.json (or start with [])\r\n    let allData = [];\r\n    try {\r\n      const raw = await fs.promises.readFile(DATA_FILE, \"utf8\");\r\n      allData = JSON.parse(raw) || [];\r\n    } catch (err) {\r\n      // If file doesn’t exist or is invalid, just reset to empty array\r\n      allData = [];\r\n    }\r\n\r\n    // h) Append our new record, then write back the file\r\n    allData.push(newRecord);\r\n    await fs.promises.writeFile(DATA_FILE, JSON.stringify(allData, null, 2), \"utf8\");\r\n\r\n    // i) Return the generated ID to the client\r\n    return NextResponse.json({ id }, { status: 200 });\r\n  } catch (err) {\r\n    console.error(\"UPLOAD ROUTE ERROR:\", err);\r\n    return NextResponse.json({ error: \"Server error during upload.\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}